<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<bean id="employee" class="com.bt.vo.BTemployee" scope="prototype" />

	<bean id="department" class="com.bt.vo.BTDepartment" scope="prototype" />
	
	<bean id="commonJobListener" class="com.bt.listeners.job.BTCommonJobListener"/> 

	<bean id="employeeJobListener" parent="commonJobListener">
	  <property name="srcFile" value="file:${batch.input.file.employee.path}"/>
	  <property name="tokenFile" value="file:${batch.input.file.employee.tokenFile}"/>
	</bean>
	
	<bean id="departmentJobListener" parent="commonJobListener">
	  <property name="srcFile" value="file:${batch.input.file.department.path}"/>
	  <property name="tokenFile" value="file:${batch.input.file.department.tokenFile}"/>
	</bean>


	<batch:job id="btEmployeeJob" incrementer="dynamicJobParameters">
		<batch:listeners>
			<batch:listener ref="employeeJobListener"></batch:listener>
		</batch:listeners>
		<batch:step id="employee_step1">
			<batch:tasklet>
				<batch:chunk reader="employeeTxtFileItemReader" writer="employeeItemWriter"
					commit-interval="${jdbc.tet.commit_interval}">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<batch:job id="btDepartmentJob" incrementer="dynamicJobParameters">
		<batch:listeners>
			<batch:listener ref="departmentJobListener" />
		</batch:listeners>
		<batch:step id="department_step1">
			<batch:tasklet>
				<batch:chunk reader="departmentTxtFileItemReader"
					writer="departmentItemWriter" commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>


	<bean id="employeeTxtFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<!-- Read a csv file -->
		<property name="resource" value="file:${batch.input.file.employee.path}" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names"
							value="depId,memId,engName,chiName,emailAddr,msnAddr" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<!-- return back to reader, rather than a mapped object. -->
					<!-- <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" 
						/> -->
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="employee" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="employeeItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into BT_Employee(dep_id,mem_id,eng_name,chi_name,email_addr,msn_addr) 
			values (:depId, :memId, :engName, :chiName,:emailAddr,:msnAddr)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<bean id="departmentTxtFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<!-- Read a csv file -->
		<property name="resource" value="file:${batch.input.file.department.path}" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="depId,depName" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="department" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="departmentItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
            	insert into BT_Department(dep_id,dep_name) 
			values (:depId, :depName)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>



</beans>